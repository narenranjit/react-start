/**
 * DEVELOPMENT WEBPACK CONFIGURATION
 */

const path = require('path');
const fs = require('fs');
const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const logger = require('../server/logger');
const cheerio = require('cheerio');
const pkg = require(path.resolve(process.cwd(), 'package.json'));
const dllPlugin = pkg.dllPlugin;

const plugins = [
    new webpack.HotModuleReplacementPlugin(), // Tell webpack we want hot reloading
    new webpack.NoErrorsPlugin(),
    new HtmlWebpackPlugin({
        inject: true, // Inject all files that are generated by webpack, e.g. bundle.js
        templateContent: templateContent(), // eslint-disable-line no-use-before-define
    }),
];

module.exports = require('./webpack.base.babel')({
    // Add hot reloading in development
    entry: [
        'eventsource-polyfill', // Necessary for hot reloading with IE
        'webpack-hot-middleware/client',
        path.join(process.cwd(), 'app/project-files/scripts/common.js'),
    ],

    // Don't use hashes in dev mode for better performance
    output: {
        filename: '[name].js',
        chunkFilename: '[name].chunk.js',
        staticPath: 'app/project-files',
    },

    // Add development plugins
    plugins: plugins, // eslint-disable-line no-use-before-define

    // Load the CSS in a style tag in development
    cssLoaders: ['style', 'css?sourceMap&localIdentName=[local]__[path][name]__[hash:base64:5]', 'sass?sourceMap'],

    // Tell babel that we want to hot-reload
    babelQuery: {
        presets: ['react-hmre'],
    },

    proxy: {
        '/app': {
            target: 'https://forio.com',
            changeOrigin: true
        },
        '/epicenter/builder': {
            target: 'http://local.forio.com:3000',
            pathRewrite: {
                '^/epicenter/builder': '',
            },
            changeOrigin: true
        },
        '/epicenter/builder-test': {
            target: 'http://local.forio.com:3000',
            pathRewrite: {
                '^/epicenter/builder-test': '',
            },
            changeOrigin: true
        }
    },
    resolve: {
        modules: ['app/project-files/scripts', 'app/project-files/styles']
    },

    // Emit a source map for easier debugging
    devtool: 'source-map',
});

/**
 * We dynamically generate the HTML content in development so that the different
 * DLL Javascript files are loaded in script tags and available to our application.
 */
function templateContent() {
    const html = fs.readFileSync(
        path.resolve(process.cwd(), 'app/project-files/index.html')
    ).toString();

    if (!dllPlugin) {
        return html; }

    const doc = cheerio(html);
    return doc.toString();
}
